package ru.omskeda.qrscanner

import android.content.Intent
import android.os.Bundle
import android.widget.Button
import android.widget.ScrollView
import android.widget.TextView
import androidx.appcompat.app.AlertDialog
import androidx.appcompat.app.AppCompatActivity
import androidx.appcompat.widget.Toolbar
import androidx.core.content.FileProvider
import timber.log.Timber

/**
 * –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤
 */
class LogViewerActivity : AppCompatActivity() {
    
    private lateinit var tvLogs: TextView
    private lateinit var scrollView: ScrollView
    private lateinit var btnRefresh: Button
    private lateinit var btnClear: Button
    private lateinit var btnShare: Button
    
    companion object {
        const val TAG = "LogViewerActivity"
    }
    
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        
        try {
            Timber.tag(TAG).i("üìã –û—Ç–∫—Ä—ã—Ç–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤")
            
            setContentView(R.layout.activity_log_viewer)
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Toolbar
            val toolbar = findViewById<Toolbar>(R.id.toolbar)
            setSupportActionBar(toolbar)
            supportActionBar?.title = "–õ–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
            supportActionBar?.setDisplayHomeAsUpEnabled(true)
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI
            tvLogs = findViewById(R.id.tvLogs)
            scrollView = findViewById(R.id.scrollView)
            btnRefresh = findViewById(R.id.btnRefresh)
            btnClear = findViewById(R.id.btnClear)
            btnShare = findViewById(R.id.btnShare)
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
            btnRefresh.setOnClickListener {
                Timber.tag(TAG).d("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–æ–≥–æ–≤")
                loadLogs()
            }
            
            btnClear.setOnClickListener {
                Timber.tag(TAG).d("üóëÔ∏è –ó–∞–ø—Ä–æ—Å –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤")
                showClearConfirmation()
            }
            
            btnShare.setOnClickListener {
                Timber.tag(TAG).d("üì§ –≠–∫—Å–ø–æ—Ä—Ç –ª–æ–≥–æ–≤")
                shareLogs()
            }
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–≥–∏
            loadLogs()
            
            Timber.tag(TAG).i("‚úÖ LogViewerActivity –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            
        } catch (e: Exception) {
            Timber.tag(TAG).e(e, "‚ùå –û—à–∏–±–∫–∞ –≤ onCreate()")
            finish()
        }
    }
    
    private fun loadLogs() {
        try {
            val logs = LogManager.getLogs()
            
            if (logs.isEmpty()) {
                tvLogs.text = "üìù –õ–æ–≥–∏ –ø—É—Å—Ç—ã"
                Timber.tag(TAG).d("‚ÑπÔ∏è –õ–æ–≥–∏ –ø—É—Å—Ç—ã")
                return
            }
            
            val logsText = buildString {
                appendLine("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
                appendLine("       –õ–û–ì–ò –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø (${logs.size})")
                appendLine("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
                appendLine()
                
                logs.forEach { entry ->
                    val levelIcon = when (entry.level) {
                        LogManager.LogLevel.DEBUG -> "üêõ"
                        LogManager.LogLevel.INFO -> "‚ÑπÔ∏è"
                        LogManager.LogLevel.WARNING -> "‚ö†Ô∏è"
                        LogManager.LogLevel.ERROR -> "‚ùå"
                    }
                    appendLine("[$levelIcon ${entry.timestamp}]")
                    appendLine(entry.message)
                    appendLine()
                }
                
                appendLine("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
                appendLine("           –ö–û–ù–ï–¶ –õ–û–ì–û–í")
                appendLine("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
            }
            
            tvLogs.text = logsText
            
            // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –≤ –∫–æ–Ω–µ—Ü
            scrollView.post {
                scrollView.fullScroll(ScrollView.FOCUS_DOWN)
            }
            
            Timber.tag(TAG).d("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${logs.size} –∑–∞–ø–∏—Å–µ–π –ª–æ–≥–∞")
            
        } catch (e: Exception) {
            Timber.tag(TAG).e(e, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ–≤")
            tvLogs.text = "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ–≤:\n${e.message}"
        }
    }
    
    private fun showClearConfirmation() {
        try {
            AlertDialog.Builder(this)
                .setTitle("–û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏?")
                .setMessage("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –ª–æ–≥–∏?")
                .setPositiveButton("–û—á–∏—Å—Ç–∏—Ç—å") { _, _ ->
                    clearLogs()
                }
                .setNegativeButton("–û—Ç–º–µ–Ω–∞", null)
                .show()
        } catch (e: Exception) {
            Timber.tag(TAG).e(e, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –¥–∏–∞–ª–æ–≥–∞")
        }
    }
    
    private fun clearLogs() {
        try {
            LogManager.clearLogs()
            loadLogs()
            
            Timber.tag(TAG).i("‚úÖ –õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã")
            LogManager.logInfo("üóëÔ∏è –õ–æ–≥–∏ –±—ã–ª–∏ –æ—á–∏—â–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            
        } catch (e: Exception) {
            Timber.tag(TAG).e(e, "‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤")
            tvLogs.text = "‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤:\n${e.message}"
        }
    }
    
    private fun shareLogs() {
        try {
            val logFile = LogManager.getLogFile()
            
            if (logFile == null || !logFile.exists()) {
                Timber.tag(TAG).w("‚ö†Ô∏è –§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                tvLogs.text = "‚ö†Ô∏è –§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω"
                return
            }
            
            val uri = FileProvider.getUriForFile(
                this,
                "${applicationContext.packageName}.fileprovider",
                logFile
            )
            
            val shareIntent = Intent(Intent.ACTION_SEND).apply {
                type = "text/plain"
                putExtra(Intent.EXTRA_STREAM, uri)
                putExtra(Intent.EXTRA_SUBJECT, "–õ–æ–≥–∏ QR Scanner v${MainActivity.APP_VERSION}")
                addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION)
            }
            
            startActivity(Intent.createChooser(shareIntent, "–≠–∫—Å–ø–æ—Ä—Ç –ª–æ–≥–æ–≤"))
            
            Timber.tag(TAG).i("‚úÖ –õ–æ–≥–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
            LogManager.logInfo("üì§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–ª –ª–æ–≥–∏")
            
        } catch (e: Exception) {
            Timber.tag(TAG).e(e, "‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ª–æ–≥–æ–≤")
            AlertDialog.Builder(this)
                .setTitle("–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞")
                .setMessage("–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–∏:\n${e.message}")
                .setPositiveButton("OK", null)
                .show()
        }
    }
    
    override fun onSupportNavigateUp(): Boolean {
        finish()
        return true
    }
}

