package ru.omskeda.qrscanner

import android.content.Intent
import android.content.SharedPreferences
import android.os.Bundle
import android.widget.Button
import android.widget.TextView
import android.widget.Toast
import androidx.appcompat.app.AlertDialog
import androidx.appcompat.app.AppCompatActivity
import androidx.appcompat.widget.Toolbar
import timber.log.Timber

/**
 * –ì–ª–∞–≤–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è QR-–∫–æ–¥–æ–≤ –∑–∞–∫–∞–∑–æ–≤
 * –í–µ—Ä—Å–∏—è 3.0.0 - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
 */
class MainActivity : AppCompatActivity() {
    
    private lateinit var prefs: SharedPreferences
    private lateinit var tvApiUrl: TextView
    private lateinit var tvStatus: TextView
    private lateinit var tvVersion: TextView
    private lateinit var tvDeviceInfo: TextView
    private lateinit var btnScan: Button
    private lateinit var btnSettings: Button
    private lateinit var btnViewLogs: Button
    
    companion object {
        const val APP_VERSION = "3.0.0"
        const val TAG = "MainActivity"
    }
    
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        
        try {
            Timber.tag(TAG).i("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
            Timber.tag(TAG).i("üì± onCreate() - –ó–∞–ø—É—Å–∫ –≥–ª–∞–≤–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
            Timber.tag(TAG).i("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
            LogManager.log("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
            LogManager.log("üì± MainActivity onCreate() - –ó–∞–ø—É—Å–∫ –≥–ª–∞–≤–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
            LogManager.log("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
            
            setContentView(R.layout.activity_main)
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Toolbar
            val toolbar = findViewById<Toolbar>(R.id.toolbar)
            setSupportActionBar(toolbar)
            supportActionBar?.title = "–°–∫–∞–Ω–µ—Ä –∑–∞–∫–∞–∑–æ–≤ –≠–≤–æ—Ç–æ—Ä"
            Timber.tag(TAG).d("‚úÖ Toolbar –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SharedPreferences
            prefs = getSharedPreferences("QRScannerPrefs", MODE_PRIVATE)
            Timber.tag(TAG).d("‚úÖ SharedPreferences –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            LogManager.logDebug("SharedPreferences –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            initializeViews()
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–µ—Ä—Å–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
            displayVersionInfo()
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
            setupButtonListeners()
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            loadSettings()
            
            Timber.tag(TAG).i("‚úÖ onCreate() –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ")
            LogManager.logInfo("‚úÖ MainActivity onCreate() –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ")
            
        } catch (e: Exception) {
            Timber.tag(TAG).e(e, "‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ onCreate()")
            LogManager.logError("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ MainActivity onCreate(): ${e.message}")
            LogManager.logError("Stack trace: ${e.stackTraceToString()}")
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ —Å –æ—à–∏–±–∫–æ–π, –Ω–æ –ù–ï –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            showErrorDialog("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ", 
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:\n${e.message}\n\n–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ.",
                shouldFinish = false)
        }
    }
    
    private fun initializeViews() {
        try {
            Timber.tag(TAG).d("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
            
            tvApiUrl = findViewById(R.id.tvApiUrl)
            tvStatus = findViewById(R.id.tvStatus)
            tvVersion = findViewById(R.id.tvVersion)
            tvDeviceInfo = findViewById(R.id.tvDeviceInfo)
            btnScan = findViewById(R.id.btnScan)
            btnSettings = findViewById(R.id.btnSettings)
            btnViewLogs = findViewById(R.id.btnViewLogs)
            
            Timber.tag(TAG).d("‚úÖ –í—Å–µ UI —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            LogManager.logDebug("‚úÖ –í—Å–µ UI —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            
        } catch (e: Exception) {
            Timber.tag(TAG).e(e, "‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ UI —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
            LogManager.logError("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ UI —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${e.message}")
            throw e
        }
    }
    
    private fun displayVersionInfo() {
        try {
            tvVersion.text = "–í–µ—Ä—Å–∏—è: $APP_VERSION (–æ—Ç–ª–∞–¥–æ—á–Ω–∞—è)"
            
            val deviceInfo = """
                –ú–æ–¥–µ–ª—å: ${android.os.Build.MODEL}
                –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å: ${android.os.Build.MANUFACTURER}
                SDK: ${android.os.Build.VERSION.SDK_INT}
            """.trimIndent()
            
            tvDeviceInfo.text = deviceInfo
            
            Timber.tag(TAG).d("üì± –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ: $deviceInfo")
            LogManager.logInfo("üì± –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∞")
            
        } catch (e: Exception) {
            Timber.tag(TAG).e(e, "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–µ—Ä—Å–∏–∏")
            LogManager.logError("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–µ—Ä—Å–∏–∏: ${e.message}")
        }
    }
    
    private fun setupButtonListeners() {
        try {
            Timber.tag(TAG).d("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–Ω–æ–ø–æ–∫")
            
            btnScan.setOnClickListener {
                Timber.tag(TAG).i("üñ±Ô∏è –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥'")
                LogManager.logInfo("üñ±Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É '–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥'")
                startScanActivity()
            }
            
            btnSettings.setOnClickListener {
                Timber.tag(TAG).i("üñ±Ô∏è –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–ù–∞—Å—Ç—Ä–æ–π–∫–∏'")
                LogManager.logInfo("üñ±Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É '–ù–∞—Å—Ç—Ä–æ–π–∫–∏'")
                startActivity(Intent(this, SettingsActivity::class.java))
            }
            
            btnViewLogs.setOnClickListener {
                Timber.tag(TAG).i("üñ±Ô∏è –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤'")
                LogManager.logInfo("üñ±Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É '–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤'")
                startActivity(Intent(this, LogViewerActivity::class.java))
            }
            
            Timber.tag(TAG).d("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            LogManager.logDebug("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            
        } catch (e: Exception) {
            Timber.tag(TAG).e(e, "‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–Ω–æ–ø–æ–∫")
            LogManager.logError("‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–Ω–æ–ø–æ–∫: ${e.message}")
        }
    }
    
    override fun onResume() {
        super.onResume()
        try {
            Timber.tag(TAG).i("‚ñ∂Ô∏è onResume() - –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞")
            LogManager.logInfo("‚ñ∂Ô∏è MainActivity onResume() - –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞")
            loadSettings()
        } catch (e: Exception) {
            Timber.tag(TAG).e(e, "‚ùå –û—à–∏–±–∫–∞ –≤ onResume()")
            LogManager.logError("‚ùå –û—à–∏–±–∫–∞ –≤ MainActivity onResume(): ${e.message}")
        }
    }
    
    override fun onPause() {
        super.onPause()
        try {
            Timber.tag(TAG).i("‚è∏Ô∏è onPause() - –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            LogManager.logInfo("‚è∏Ô∏è MainActivity onPause() - –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        } catch (e: Exception) {
            Timber.tag(TAG).e(e, "‚ùå –û—à–∏–±–∫–∞ –≤ onPause()")
            LogManager.logError("‚ùå –û—à–∏–±–∫–∞ –≤ MainActivity onPause(): ${e.message}")
        }
    }
    
    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ SharedPreferences
     */
    private fun loadSettings() {
        try {
            Timber.tag(TAG).d("üîç –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ SharedPreferences")
            LogManager.logDebug("üîç –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ SharedPreferences")
            
            val apiUrl = prefs.getString("api_url", "") ?: ""
            
            Timber.tag(TAG).d("üìù API URL –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫: ${if (apiUrl.isEmpty()) "–Ω–µ –∑–∞–¥–∞–Ω" else apiUrl}")
            LogManager.logInfo("üìù API URL: ${if (apiUrl.isEmpty()) "–Ω–µ –∑–∞–¥–∞–Ω" else apiUrl}")
            
            if (apiUrl.isEmpty()) {
                tvApiUrl.text = "‚ö†Ô∏è API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
                tvStatus.text = "‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞"
                btnScan.isEnabled = false
                
                Timber.tag(TAG).w("‚ö†Ô∏è API URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - –∫–Ω–æ–ø–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞")
                LogManager.logWarning("‚ö†Ô∏è API URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - —Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞")
                
                showApiNotConfiguredDialog()
            } else {
                tvApiUrl.text = "API: $apiUrl"
                tvStatus.text = "‚úÖ –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ"
                btnScan.isEnabled = true
                
                Timber.tag(TAG).i("‚úÖ API –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ")
                LogManager.logInfo("‚úÖ API –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ")
            }
            
        } catch (e: Exception) {
            Timber.tag(TAG).e(e, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
            LogManager.logError("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: ${e.message}")
            
            tvApiUrl.text = "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫"
            tvStatus.text = "‚ùå –û—à–∏–±–∫–∞"
            btnScan.isEnabled = false
        }
    }
    
    /**
     * –ó–∞–ø—É—Å–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    private fun startScanActivity() {
        try {
            Timber.tag(TAG).i("üöÄ –ó–∞–ø—É—Å–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
            LogManager.logInfo("üöÄ –ó–∞–ø—É—Å–∫ ScanActivity")
            
            val apiUrl = prefs.getString("api_url", "") ?: ""
            
            if (apiUrl.isEmpty()) {
                Timber.tag(TAG).w("‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ API")
                LogManager.logWarning("‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ API")
                
                Toast.makeText(this, "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ API URL –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö", Toast.LENGTH_LONG).show()
                startActivity(Intent(this, SettingsActivity::class.java))
                return
            }
            
            val intent = Intent(this, ScanActivity::class.java)
            startActivity(intent)
            
            Timber.tag(TAG).i("‚úÖ ScanActivity –∑–∞–ø—É—â–µ–Ω–∞")
            LogManager.logInfo("‚úÖ ScanActivity —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞")
            
        } catch (e: Exception) {
            Timber.tag(TAG).e(e, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ ScanActivity")
            LogManager.logError("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ ScanActivity: ${e.message}")
            LogManager.logError("Stack trace: ${e.stackTraceToString()}")
            
            showErrorDialog("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∫–∞–Ω–µ—Ä–∞", 
                "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫–∞–Ω–µ—Ä:\n${e.message}",
                shouldFinish = false)
        }
    }
    
    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API
     */
    private fun showApiNotConfiguredDialog() {
        try {
            AlertDialog.Builder(this)
                .setTitle("‚öôÔ∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞")
                .setMessage("–î–ª—è —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å URL —Å–µ—Ä–≤–µ—Ä–∞.\n\n–ü–µ—Ä–µ–π—Ç–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏?")
                .setPositiveButton("–ù–∞—Å—Ç—Ä–æ–∏—Ç—å") { _, _ ->
                    Timber.tag(TAG).i("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ—à–µ–ª –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –¥–∏–∞–ª–æ–≥–∞")
                    LogManager.logInfo("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ—à–µ–ª –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –¥–∏–∞–ª–æ–≥–∞")
                    startActivity(Intent(this, SettingsActivity::class.java))
                }
                .setNegativeButton("–ü–æ–∑–∂–µ", null)
                .show()
        } catch (e: Exception) {
            Timber.tag(TAG).e(e, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –¥–∏–∞–ª–æ–≥–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API")
            LogManager.logError("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –¥–∏–∞–ª–æ–≥–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API: ${e.message}")
        }
    }
    
    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å –æ—à–∏–±–∫–æ–π
     */
    private fun showErrorDialog(title: String, message: String, shouldFinish: Boolean = false) {
        try {
            AlertDialog.Builder(this)
                .setTitle(title)
                .setMessage(message)
                .setPositiveButton("OK") { _, _ ->
                    if (shouldFinish) {
                        finish()
                    }
                }
                .setNeutralButton("–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏") { _, _ ->
                    startActivity(Intent(this, LogViewerActivity::class.java))
                }
                .setCancelable(!shouldFinish)
                .show()
        } catch (e: Exception) {
            Timber.tag(TAG).e(e, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –¥–∏–∞–ª–æ–≥–∞ –æ—à–∏–±–∫–∏")
            LogManager.logError("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –¥–∏–∞–ª–æ–≥–∞ –æ—à–∏–±–∫–∏: ${e.message}")
        }
    }
    
    override fun onDestroy() {
        super.onDestroy()
        try {
            Timber.tag(TAG).i("üîö onDestroy() - –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∞")
            LogManager.logInfo("üîö MainActivity onDestroy() - –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∞")
        } catch (e: Exception) {
            Timber.tag(TAG).e(e, "‚ùå –û—à–∏–±–∫–∞ –≤ onDestroy()")
            LogManager.logError("‚ùå –û—à–∏–±–∫–∞ –≤ MainActivity onDestroy(): ${e.message}")
        }
    }
}

