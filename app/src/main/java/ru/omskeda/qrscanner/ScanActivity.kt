package ru.omskeda.qrscanner

import android.content.Intent
import android.os.Bundle
import android.os.Handler
import android.os.Looper
import android.os.Vibrator
import android.view.KeyEvent
import android.widget.EditText
import android.widget.TextView
import android.widget.Toast
import androidx.appcompat.app.AlertDialog
import androidx.appcompat.app.AppCompatActivity
import com.google.zxing.BarcodeFormat
import com.google.zxing.ResultPoint
import com.google.zxing.client.android.BeepManager
import com.journeyapps.barcodescanner.BarcodeCallback
import com.journeyapps.barcodescanner.BarcodeResult
import com.journeyapps.barcodescanner.DecoratedBarcodeView
import com.journeyapps.barcodescanner.DefaultDecoderFactory
import org.json.JSONObject
import timber.log.Timber

/**
 * –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è QR-–∫–æ–¥–æ–≤
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–∞–º–µ—Ä—É –∏ 2D HID-—Å–∫–∞–Ω–µ—Ä NETUM K20
 */
class ScanActivity : AppCompatActivity() {
    
    private lateinit var barcodeView: DecoratedBarcodeView
    private lateinit var beepManager: BeepManager
    private lateinit var tvScanStatus: TextView
    private lateinit var inputHid: EditText
    private var isScanning = true
    
    // HID-—Å–∫–∞–Ω–µ—Ä –ø–æ–¥–¥–µ—Ä–∂–∫–∞
    private var hidBuffer = StringBuilder()
    private val hidHandler = Handler(Looper.getMainLooper())
    private var lastKeyTime = 0L
    private val hidTimeoutMs = 100L  // –ï—Å–ª–∏ –ø–∞—É–∑–∞ –±–æ–ª—å—à–µ 100–º—Å, —Å—á–∏—Ç–∞–µ–º –Ω–æ–≤–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    
    companion object {
        const val TAG = "ScanActivity"
    }
    
    private val callback = object : BarcodeCallback {
        override fun barcodeResult(result: BarcodeResult?) {
            try {
                Timber.tag(TAG).d("üì∏ barcodeResult() –≤—ã–∑–≤–∞–Ω, result=${result?.text?.take(30) ?: "null"}, isScanning=$isScanning")
                LogManager.logDebug("üì∏ Camera callback: result=${result?.text?.take(30) ?: "null"}, isScanning=$isScanning")
                
                if (result == null || !isScanning) {
                    return
                }
                
                isScanning = false
                val qrData = result.text
                
                Timber.tag(TAG).i("üì∏ –ö–∞–º–µ—Ä–∞ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–ª–∞ QR: ${qrData.take(50)}")
                LogManager.logInfo("üì∏ –ö–∞–º–µ—Ä–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–ª–∞ QR-–∫–æ–¥ (${qrData.length} —Å–∏–º–≤–æ–ª–æ–≤)")
                
                // –í–∏–±—Ä–∞—Ü–∏—è –∏ –∑–≤—É–∫ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏
                playSuccessSound()
                
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ QR-–∫–æ–¥–∞
                handleQRCode(qrData, "–ö–∞–º–µ—Ä–∞")
                
            } catch (e: Exception) {
                Timber.tag(TAG).e(e, "‚ùå –û—à–∏–±–∫–∞ –≤ barcodeResult callback")
                LogManager.logError("‚ùå –û—à–∏–±–∫–∞ –≤ camera callback: ${e.message}")
                isScanning = true
            }
        }
        
        override fun possibleResultPoints(resultPoints: MutableList<ResultPoint>?) {
            // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
        }
    }
    
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        
        try {
            Timber.tag(TAG).i("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
            Timber.tag(TAG).i("üì± onCreate() - –ó–∞–ø—É—Å–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
            Timber.tag(TAG).i("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
            LogManager.log("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
            LogManager.log("üì± ScanActivity onCreate() - –ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
            LogManager.log("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
            
            setContentView(R.layout.activity_scan)
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI
            barcodeView = findViewById(R.id.barcode_scanner)
            tvScanStatus = findViewById(R.id.tvScanStatus)
            inputHid = findViewById(R.id.input_hid)
            beepManager = BeepManager(this)
            
            Timber.tag(TAG).d("‚úÖ UI —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            LogManager.logDebug("‚úÖ UI —ç–ª–µ–º–µ–Ω—Ç—ã —Å–∫–∞–Ω–µ—Ä–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ HID input –¥–ª—è 2D —Å–∫–∞–Ω–µ—Ä–∞
            setupHIDScanner()
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∫–∞–Ω–µ—Ä–∞ –¥–ª—è QR-–∫–æ–¥–æ–≤
            setupBarcodeScanner()
            
            updateStatus("üîç –ì–æ—Ç–æ–≤ –∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é\nüì∑ –ù–∞–≤–µ–¥–∏—Ç–µ –∫–∞–º–µ—Ä—É –Ω–∞ QR-–∫–æ–¥\n–∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ 2D-—Å–∫–∞–Ω–µ—Ä NETUM K20")
            
            Timber.tag(TAG).i("‚úÖ onCreate() –∑–∞–≤–µ—Ä—à—ë–Ω, —Å–∫–∞–Ω–µ—Ä –≥–æ—Ç–æ–≤")
            LogManager.logInfo("‚úÖ ScanActivity onCreate() –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ")
            
        } catch (e: Exception) {
            Timber.tag(TAG).e(e, "‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ onCreate()")
            LogManager.logError("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ ScanActivity onCreate(): ${e.message}")
            LogManager.logError("Stack trace: ${e.stackTraceToString()}")
            
            showError("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∫–∞–Ω–µ—Ä–∞", 
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–∫–∞–Ω–µ—Ä–∞:\n${e.message}\n\n–í–æ–∑–º–æ–∂–Ω–æ, –∫–∞–º–µ—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        }
    }
    
    private fun setupHIDScanner() {
        try {
            Timber.tag(TAG).d("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ HID-—Å–∫–∞–Ω–µ—Ä–∞")
            LogManager.logDebug("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ 2D HID-—Å–∫–∞–Ω–µ—Ä–∞ NETUM K20")
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–∫—É—Å –Ω–∞ —Å–∫—Ä—ã—Ç—ã–π EditText –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–≤–æ–¥–∞ –æ—Ç HID-—Å–∫–∞–Ω–µ—Ä–∞
            inputHid.requestFocus()
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è Enter –æ—Ç HID-—Å–∫–∞–Ω–µ—Ä–∞
            inputHid.setOnKeyListener { _, keyCode, event ->
                if (event.action == KeyEvent.ACTION_DOWN && keyCode == KeyEvent.KEYCODE_ENTER) {
                    val data = inputHid.text.toString().trim()
                    if (data.isNotEmpty()) {
                        Timber.tag(TAG).i("‚å®Ô∏è HID —Å–∫–∞–Ω–µ—Ä (Enter): $data")
                        LogManager.logInfo("‚å®Ô∏è HID —Å–∫–∞–Ω–µ—Ä –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–ª —á–µ—Ä–µ–∑ EditText: ${data.take(30)}...")
                        inputHid.setText("")
                        hidBuffer.clear()
                        handleQRCode(data, "2D HID-—Å–∫–∞–Ω–µ—Ä NETUM K20")
                    }
                    true
                } else {
                    false
                }
            }
            
            Timber.tag(TAG).d("‚úÖ HID-—Å–∫–∞–Ω–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            LogManager.logDebug("‚úÖ HID-—Å–∫–∞–Ω–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
            
        } catch (e: Exception) {
            Timber.tag(TAG).e(e, "‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ HID-—Å–∫–∞–Ω–µ—Ä–∞")
            LogManager.logError("‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ HID-—Å–∫–∞–Ω–µ—Ä–∞: ${e.message}")
        }
    }
    
    private fun setupBarcodeScanner() {
        try {
            Timber.tag(TAG).d("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–º–µ—Ä—ã –¥–ª—è QR-–∫–æ–¥–æ–≤")
            LogManager.logDebug("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–º–µ—Ä—ã –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è QR-–∫–æ–¥–æ–≤")
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∫–∞–Ω–µ—Ä–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è QR-–∫–æ–¥–æ–≤
            val formats = listOf(BarcodeFormat.QR_CODE)
            barcodeView.barcodeView.decoderFactory = DefaultDecoderFactory(formats)
            barcodeView.initializeFromIntent(intent)
            barcodeView.decodeContinuous(callback)
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∞—Ç—É—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
            barcodeView.statusView?.text = "–ù–∞–≤–µ–¥–∏—Ç–µ –∫–∞–º–µ—Ä—É –Ω–∞ QR-–∫–æ–¥"
            
            Timber.tag(TAG).d("‚úÖ –ö–∞–º–µ—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
            LogManager.logDebug("‚úÖ –ö–∞–º–µ—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è QR-–∫–æ–¥–æ–≤")
            
        } catch (e: Exception) {
            Timber.tag(TAG).e(e, "‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–º–µ—Ä—ã")
            LogManager.logError("‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–º–µ—Ä—ã: ${e.message}")
            updateStatus("‚ö†Ô∏è –ö–∞–º–µ—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 2D-—Å–∫–∞–Ω–µ—Ä")
        }
    }
    
    /**
     * –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –æ—Ç HID-—Å–∫–∞–Ω–µ—Ä–∞ –Ω–∞ —É—Ä–æ–≤–Ω–µ Activity
     * –≠—Ç–æ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥ –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ EditText –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç —Ñ–æ–∫—É—Å
     */
    override fun onKeyDown(keyCode: Int, event: KeyEvent?): Boolean {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –ª–∏ —Å–∏–º–≤–æ–ª—å–Ω–∞—è –∫–ª–∞–≤–∏—à–∞ (–Ω–µ —Å–∏—Å—Ç–µ–º–Ω–∞—è)
            if (event != null && event.unicodeChar != 0) {
                val currentTime = System.currentTimeMillis()
                
                // –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–∏–º–≤–æ–ª–∞, –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Å–∫–∞–Ω
                if (currentTime - lastKeyTime > hidTimeoutMs) {
                    if (hidBuffer.isNotEmpty()) {
                        Timber.tag(TAG).d("‚è±Ô∏è –¢–∞–π–º-–∞—É—Ç HID –±—É—Ñ–µ—Ä–∞, –æ—á–∏—Å—Ç–∫–∞")
                    }
                    hidBuffer.clear()
                }
                lastKeyTime = currentTime
                
                // –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–º–≤–æ–ª –≤ –±—É—Ñ–µ—Ä
                val char = event.unicodeChar.toChar()
                hidBuffer.append(char)
                Timber.tag(TAG).d("‚å®Ô∏è HID —Å–∏–º–≤–æ–ª: '$char', –±—É—Ñ–µ—Ä: ${hidBuffer.length} —Å–∏–º–≤–æ–ª–æ–≤")
                
                return true
            }
            
            // –ï—Å–ª–∏ Enter, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            if (keyCode == KeyEvent.KEYCODE_ENTER) {
                val data = hidBuffer.toString().trim()
                if (data.isNotEmpty()) {
                    Timber.tag(TAG).i("‚úÖ HID —Å–∫–∞–Ω–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª: $data")
                    LogManager.logInfo("‚úÖ HID —Å–∫–∞–Ω–µ—Ä (onKeyDown) –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–ª: ${data.take(30)}...")
                    hidBuffer.clear()
                    lastKeyTime = 0L
                    handleQRCode(data, "2D HID-—Å–∫–∞–Ω–µ—Ä NETUM K20 (Direct)")
                }
                return true
            }
            
        } catch (e: Exception) {
            Timber.tag(TAG).e(e, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ onKeyDown")
            LogManager.logError("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ HID onKeyDown: ${e.message}")
        }
        
        return super.onKeyDown(keyCode, event)
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ QR-–∫–æ–¥–∞
     */
    private fun handleQRCode(qrData: String, source: String) {
        try {
            Timber.tag(TAG).i("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
            Timber.tag(TAG).i("üîç QR-–∫–æ–¥ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞: $source")
            Timber.tag(TAG).i("üìù –î–∞–Ω–Ω—ã–µ (–ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤): ${qrData.take(100)}")
            Timber.tag(TAG).i("üìè –î–ª–∏–Ω–∞ –¥–∞–Ω–Ω—ã—Ö: ${qrData.length} —Å–∏–º–≤–æ–ª–æ–≤")
            Timber.tag(TAG).i("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
            
            LogManager.log("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
            LogManager.log("üîç QR-–∫–æ–¥ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω!")
            LogManager.log("üì± –ò—Å—Ç–æ—á–Ω–∏–∫: $source")
            LogManager.log("üìù –î–∞–Ω–Ω—ã–µ (–ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤): ${qrData.take(100)}")
            LogManager.log("üìè –î–ª–∏–Ω–∞ –¥–∞–Ω–Ω—ã—Ö: ${qrData.length} —Å–∏–º–≤–æ–ª–æ–≤")
            LogManager.log("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
            
            updateStatus("‚úÖ QR-–∫–æ–¥ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω!\n–ò—Å—Ç–æ—á–Ω–∏–∫: $source\n–û–±—Ä–∞–±–æ—Ç–∫–∞...")
            
            // –û—á–∏—â–∞–µ–º –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
            val cleanedData = qrData.trim()
                .replace("–®—Ç—Ä–∏—Ö–∫–æ–¥", "")  // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –æ—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö 2D-—Å–∫–∞–Ω–µ—Ä–æ–≤
                .replace("\\s+".toRegex(), "")  // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –ø—Ä–æ–±–µ–ª—ã
                .trim()
            
            Timber.tag(TAG).d("üßπ –î–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ (–ø–µ—Ä–≤—ã–µ 50): ${cleanedData.take(50)}")
            LogManager.logDebug("üßπ –î–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏: ${cleanedData.take(50)}...")
            
            var token: String? = null
            
            // –ü—ã—Ç–∞–µ–º—Å—è –ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç)
            if (cleanedData.startsWith("{") && cleanedData.endsWith("}")) {
                try {
                    val json = JSONObject(cleanedData)
                    Timber.tag(TAG).d("‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω JSON —Ñ–æ—Ä–º–∞—Ç (—Å—Ç–∞—Ä—ã–π)")
                    LogManager.logDebug("‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω JSON —Ñ–æ—Ä–º–∞—Ç QR-–∫–æ–¥–∞")
                    
                    token = json.optString("token", "")
                    val type = json.optString("type", "")
                    
                    if (type.isNotEmpty() && type != "pickup") {
                        Timber.tag(TAG).w("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø QR-–∫–æ–¥–∞: $type (–æ–∂–∏–¥–∞–µ—Ç—Å—è pickup)")
                        LogManager.logWarning("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø QR-–∫–æ–¥–∞: $type")
                        showError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø QR-–∫–æ–¥–∞", "–≠—Ç–æ—Ç QR-–∫–æ–¥ –Ω–µ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –≤—ã–¥–∞—á–∏ –∑–∞–∫–∞–∑–∞.")
                        return
                    }
                } catch (jsonError: Exception) {
                    Timber.tag(TAG).w(jsonError, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON")
                    LogManager.logWarning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON: ${jsonError.message}")
                }
            }
            
            // –ï—Å–ª–∏ JSON –Ω–µ —Ä–∞—Å–ø–∞—Ä—Å–∏–ª—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—é —Å—Ç—Ä–æ–∫—É –∫–∞–∫ —Ç–æ–∫–µ–Ω
            if (token.isNullOrEmpty()) {
                token = cleanedData
                Timber.tag(TAG).d("‚ÑπÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–µ—Å—å QR-–∫–æ–¥ –∫–∞–∫ —Ç–æ–∫–µ–Ω")
                LogManager.logInfo("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º QR-–∫–æ–¥ –∫–∞–∫ —Ç–æ–∫–µ–Ω –Ω–∞–ø—Ä—è–º—É—é")
            }
            
            // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞
            if (token.length < 10) {
                Timber.tag(TAG).e("‚ùå –¢–æ–∫–µ–Ω —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π: ${token.length} —Å–∏–º–≤–æ–ª–æ–≤")
                LogManager.logError("‚ùå –¢–æ–∫–µ–Ω —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π: ${token.length} —Å–∏–º–≤–æ–ª–æ–≤ (–º–∏–Ω–∏–º—É–º 10)")
                showError("–ù–µ–≤–µ—Ä–Ω—ã–π QR-–∫–æ–¥", "QR-–∫–æ–¥ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –ø–æ–≤—Ä–µ–∂–¥–µ–Ω –∏–ª–∏ —ç—Ç–æ –Ω–µ QR-–∫–æ–¥ –∑–∞–∫–∞–∑–∞.")
                return
            }
            
            if (token.length > 100) {
                Timber.tag(TAG).w("‚ö†Ô∏è –¢–æ–∫–µ–Ω –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–π: ${token.length} —Å–∏–º–≤–æ–ª–æ–≤")
                LogManager.logWarning("‚ö†Ô∏è –¢–æ–∫–µ–Ω –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –¥–ª–∏–Ω–Ω—ã–π: ${token.length} —Å–∏–º–≤–æ–ª–æ–≤")
            }
            
            Timber.tag(TAG).i("‚úÖ –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω, –æ—Ç–∫—Ä—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞")
            Timber.tag(TAG).i("üîë –¢–æ–∫–µ–Ω (–ø–µ—Ä–≤—ã–µ 16 —Å–∏–º–≤–æ–ª–æ–≤): ${token.take(16)}...")
            LogManager.logInfo("‚úÖ –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω: ${token.take(16)}...")
            LogManager.logInfo("üöÄ –û—Ç–∫—Ä—ã–≤–∞–µ–º OrderDetailActivity")
            
            // –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞
            val intent = Intent(this, OrderDetailActivity::class.java).apply {
                putExtra("token", token)
                putExtra("source", source)
            }
            startActivity(intent)
            
            Timber.tag(TAG).i("‚úÖ OrderDetailActivity –∑–∞–ø—É—â–µ–Ω–∞")
            LogManager.logInfo("‚úÖ OrderDetailActivity —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞ —Å —Ç–æ–∫–µ–Ω–æ–º")
            
        } catch (e: Exception) {
            Timber.tag(TAG).e(e, "‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –æ–±—Ä–∞–±–æ—Ç–∫–∏ QR")
            LogManager.logError("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –æ–±—Ä–∞–±–æ—Ç–∫–∏ QR: ${e.message}")
            LogManager.logError("Stack trace: ${e.stackTraceToString()}")
            
            showError("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ QR-–∫–æ–¥–∞", 
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ QR-–∫–æ–¥–∞:\n${e.message}")
        } finally {
            // –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏
            Handler(Looper.getMainLooper()).postDelayed({
                isScanning = true
                updateStatus("üîç –ì–æ—Ç–æ–≤ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é")
            }, 1000)
        }
    }
    
    private fun playSuccessSound() {
        try {
            val vibrator = getSystemService(VIBRATOR_SERVICE) as? Vibrator
            vibrator?.vibrate(200)
            beepManager.playBeepSoundAndVibrate()
            Timber.tag(TAG).d("üîä –ó–≤—É–∫ –∏ –≤–∏–±—Ä–∞—Ü–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω—ã")
        } catch (e: Exception) {
            Timber.tag(TAG).e(e, "‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–≤—É–∫–∞/–≤–∏–±—Ä–∞—Ü–∏–∏")
            LogManager.logError("‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: ${e.message}")
        }
    }
    
    private fun updateStatus(text: String) {
        runOnUiThread {
            try {
                tvScanStatus.text = text
                Timber.tag(TAG).d("üìù –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω: $text")
            } catch (e: Exception) {
                Timber.tag(TAG).e(e, "‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞")
            }
        }
    }
    
    private fun showError(title: String, message: String) {
        runOnUiThread {
            try {
                isScanning = false
                updateStatus("‚ùå $title")
                
                AlertDialog.Builder(this)
                    .setTitle(title)
                    .setMessage(message)
                    .setPositiveButton("–ü–æ–≤—Ç–æ—Ä–∏—Ç—å") { _, _ ->
                        isScanning = true
                        updateStatus("üîç –ì–æ—Ç–æ–≤ –∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é")
                        inputHid.requestFocus()
                    }
                    .setNegativeButton("–ù–∞–∑–∞–¥") { _, _ ->
                        finish()
                    }
                    .setNeutralButton("–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤") { _, _ ->
                        startActivity(Intent(this, LogViewerActivity::class.java))
                    }
                    .setCancelable(false)
                    .show()
                    
                Timber.tag(TAG).d("‚úÖ –î–∏–∞–ª–æ–≥ –æ—à–∏–±–∫–∏ –ø–æ–∫–∞–∑–∞–Ω")
            } catch (e: Exception) {
                Timber.tag(TAG).e(e, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –¥–∏–∞–ª–æ–≥–∞ –æ—à–∏–±–∫–∏")
                finish()
            }
        }
    }
    
    override fun onResume() {
        super.onResume()
        try {
            Timber.tag(TAG).i("‚ñ∂Ô∏è onResume() - –í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
            LogManager.logInfo("‚ñ∂Ô∏è ScanActivity onResume()")
            
            barcodeView.resume()
            isScanning = true
            inputHid.requestFocus()
            updateStatus("üîç –ì–æ—Ç–æ–≤ –∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é")
            
            Timber.tag(TAG).d("‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–æ")
        } catch (e: Exception) {
            Timber.tag(TAG).e(e, "‚ùå –û—à–∏–±–∫–∞ –≤ onResume()")
            LogManager.logError("‚ùå –û—à–∏–±–∫–∞ –≤ ScanActivity onResume(): ${e.message}")
        }
    }
    
    override fun onPause() {
        super.onPause()
        try {
            Timber.tag(TAG).i("‚è∏Ô∏è onPause() - –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
            LogManager.logInfo("‚è∏Ô∏è ScanActivity onPause()")
            
            barcodeView.pause()
            isScanning = false
            
        } catch (e: Exception) {
            Timber.tag(TAG).e(e, "‚ùå –û—à–∏–±–∫–∞ –≤ onPause()")
            LogManager.logError("‚ùå –û—à–∏–±–∫–∞ –≤ ScanActivity onPause(): ${e.message}")
        }
    }
    
    override fun onDestroy() {
        super.onDestroy()
        try {
            Timber.tag(TAG).i("üîö onDestroy()")
            LogManager.logInfo("üîö ScanActivity onDestroy()")
        } catch (e: Exception) {
            Timber.tag(TAG).e(e, "‚ùå –û—à–∏–±–∫–∞ –≤ onDestroy()")
        }
    }
    
    override fun onBackPressed() {
        Timber.tag(TAG).i("üîô –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥")
        LogManager.logInfo("üîô –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫–∏–Ω—É–ª ScanActivity")
        super.onBackPressed()
    }
}

