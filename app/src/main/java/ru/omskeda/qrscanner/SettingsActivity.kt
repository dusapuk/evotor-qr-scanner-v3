package ru.omskeda.qrscanner

import android.content.SharedPreferences
import android.os.Bundle
import android.widget.Button
import android.widget.EditText
import android.widget.TextView
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import androidx.appcompat.widget.Toolbar
import kotlinx.coroutines.*
import okhttp3.OkHttpClient
import okhttp3.Request
import timber.log.Timber
import java.util.concurrent.TimeUnit

/**
 * –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */
class SettingsActivity : AppCompatActivity() {
    
    private lateinit var prefs: SharedPreferences
    private lateinit var etApiUrl: EditText
    private lateinit var tvConnectionStatus: TextView
    private lateinit var btnSave: Button
    private lateinit var btnTest: Button
    private val scope = CoroutineScope(Dispatchers.Main + Job())
    private val client = OkHttpClient.Builder()
        .connectTimeout(10, TimeUnit.SECONDS)
        .readTimeout(10, TimeUnit.SECONDS)
        .build()
    
    companion object {
        const val TAG = "SettingsActivity"
    }
    
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        
        try {
            Timber.tag(TAG).i("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
            Timber.tag(TAG).i("‚öôÔ∏è onCreate() - –û—Ç–∫—Ä—ã—Ç–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
            Timber.tag(TAG).i("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
            LogManager.log("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
            LogManager.log("‚öôÔ∏è SettingsActivity onCreate()")
            LogManager.log("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
            
            setContentView(R.layout.activity_settings)
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Toolbar
            val toolbar = findViewById<Toolbar>(R.id.toolbar)
            setSupportActionBar(toolbar)
            supportActionBar?.title = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
            supportActionBar?.setDisplayHomeAsUpEnabled(true)
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SharedPreferences
            prefs = getSharedPreferences("QRScannerPrefs", MODE_PRIVATE)
            Timber.tag(TAG).d("‚úÖ SharedPreferences –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            etApiUrl = findViewById(R.id.etApiUrl)
            tvConnectionStatus = findViewById(R.id.tvConnectionStatus)
            btnSave = findViewById(R.id.btnSave)
            btnTest = findViewById(R.id.btnTest)
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            loadSettings()
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            btnSave.setOnClickListener {
                Timber.tag(TAG).i("üñ±Ô∏è –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'")
                LogManager.logInfo("üñ±Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏'")
                saveSettings()
            }
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
            btnTest.setOnClickListener {
                Timber.tag(TAG).i("üñ±Ô∏è –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ'")
                LogManager.logInfo("üñ±Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—É—Å—Ç–∏–ª –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
                testConnection()
            }
            
            Timber.tag(TAG).i("‚úÖ onCreate() –∑–∞–≤–µ—Ä—à—ë–Ω")
            LogManager.logInfo("‚úÖ SettingsActivity onCreate() –∑–∞–≤–µ—Ä—à—ë–Ω")
            
        } catch (e: Exception) {
            Timber.tag(TAG).e(e, "‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ onCreate()")
            LogManager.logError("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ SettingsActivity onCreate(): ${e.message}")
            Toast.makeText(this, "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: ${e.message}", Toast.LENGTH_LONG).show()
        }
    }
    
    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ SharedPreferences
     */
    private fun loadSettings() {
        try {
            Timber.tag(TAG).d("üîç –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫")
            LogManager.logDebug("üîç –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ SharedPreferences")
            
            val apiUrl = prefs.getString("api_url", "") ?: ""
            etApiUrl.setText(apiUrl)
            
            if (apiUrl.isNotEmpty()) {
                tvConnectionStatus.text = "üìù URL: $apiUrl"
                Timber.tag(TAG).d("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω API URL: $apiUrl")
                LogManager.logInfo("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π API URL: $apiUrl")
            } else {
                tvConnectionStatus.text = "‚ö†Ô∏è API URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
                Timber.tag(TAG).w("‚ö†Ô∏è API URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                LogManager.logWarning("‚ö†Ô∏è API URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            }
            
        } catch (e: Exception) {
            Timber.tag(TAG).e(e, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
            LogManager.logError("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: ${e.message}")
        }
    }
    
    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ SharedPreferences
     */
    private fun saveSettings() {
        try {
            val apiUrl = etApiUrl.text.toString().trim()
            
            Timber.tag(TAG).d("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
            Timber.tag(TAG).d("üìù API URL –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: $apiUrl")
            LogManager.logInfo("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
            LogManager.logInfo("üìù API URL: $apiUrl")
            
            if (apiUrl.isEmpty()) {
                Timber.tag(TAG).w("‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—É—Å—Ç–æ–π API URL")
                LogManager.logWarning("‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—É—Å—Ç–æ–π API URL")
                Toast.makeText(this, "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ API URL", Toast.LENGTH_SHORT).show()
                return
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç URL
            if (!apiUrl.startsWith("http://") && !apiUrl.startsWith("https://")) {
                Timber.tag(TAG).w("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç URL: $apiUrl")
                LogManager.logWarning("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç URL (–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç http:// –∏–ª–∏ https://)")
                Toast.makeText(this, "‚ö†Ô∏è URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://", Toast.LENGTH_LONG).show()
                return
            }
            
            // –£–±–∏—Ä–∞–µ–º trailing slash –µ—Å–ª–∏ –µ—Å—Ç—å
            val cleanUrl = apiUrl.trimEnd('/')
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            with(prefs.edit()) {
                putString("api_url", cleanUrl)
                apply()
            }
            
            Timber.tag(TAG).i("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: $cleanUrl")
            LogManager.logInfo("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: $cleanUrl")
            
            tvConnectionStatus.text = "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã"
            Toast.makeText(this, "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ", Toast.LENGTH_SHORT).show()
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
            finish()
            
        } catch (e: Exception) {
            Timber.tag(TAG).e(e, "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫")
            LogManager.logError("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: ${e.message}")
            Toast.makeText(this, "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${e.message}", Toast.LENGTH_LONG).show()
        }
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API
     */
    private fun testConnection() {
        val apiUrl = etApiUrl.text.toString().trim()
        
        if (apiUrl.isEmpty()) {
            Timber.tag(TAG).w("‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑ URL")
            LogManager.logWarning("‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –±–µ–∑ URL")
            Toast.makeText(this, "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ API URL", Toast.LENGTH_SHORT).show()
            return
        }
        
        if (!apiUrl.startsWith("http://") && !apiUrl.startsWith("https://")) {
            Timber.tag(TAG).w("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç URL –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
            LogManager.logWarning("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç URL –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
            Toast.makeText(this, "‚ö†Ô∏è URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://", Toast.LENGTH_SHORT).show()
            return
        }
        
        Timber.tag(TAG).i("üîç –ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫: $apiUrl")
        LogManager.logInfo("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É: $apiUrl")
        
        btnTest.isEnabled = false
        btnTest.text = "‚è≥ –ü—Ä–æ–≤–µ—Ä–∫–∞..."
        tvConnectionStatus.text = "‚è≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è..."
        
        scope.launch {
            try {
                val result = withContext(Dispatchers.IO) {
                    testApi(apiUrl)
                }
                
                if (result) {
                    Timber.tag(TAG).i("‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω –∏ –æ—Ç–≤–µ—á–∞–µ—Ç")
                    LogManager.logInfo("‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω –∏ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã")
                    
                    tvConnectionStatus.text = "‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω"
                    Toast.makeText(this@SettingsActivity, "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!", Toast.LENGTH_LONG).show()
                } else {
                    Timber.tag(TAG).e("‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                    LogManager.logError("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç")
                    
                    tvConnectionStatus.text = "‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
                    Toast.makeText(this@SettingsActivity, "‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ URL –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ç–∏.", Toast.LENGTH_LONG).show()
                }
            } catch (e: Exception) {
                Timber.tag(TAG).e(e, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
                LogManager.logError("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${e.message}")
                
                tvConnectionStatus.text = "‚ùå –û—à–∏–±–∫–∞: ${e.message}"
                Toast.makeText(this@SettingsActivity, "‚ùå –û—à–∏–±–∫–∞: ${e.message}", Toast.LENGTH_LONG).show()
            } finally {
                btnTest.isEnabled = true
                btnTest.text = "üîó –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"
            }
        }
    }
    
    /**
     * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API
     */
    private fun testApi(apiUrl: String): Boolean {
        return try {
            val cleanUrl = apiUrl.trimEnd('/')
            val testUrl = "$cleanUrl/api/qrcode/info-by-token"
            
            Timber.tag(TAG).d("üì° –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫: $testUrl")
            LogManager.logDebug("üì° –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: $testUrl")
            
            val request = Request.Builder()
                .url(testUrl)
                .addHeader("Content-Type", "application/json")
                .build()
            
            val response = client.newCall(request).execute()
            val responseCode = response.code
            
            Timber.tag(TAG).d("üì® HTTP –æ—Ç–≤–µ—Ç: $responseCode")
            LogManager.logInfo("üì® –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: HTTP $responseCode ${response.message}")
            
            // –°—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–º, –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç (–¥–∞–∂–µ —Å –æ—à–∏–±–∫–æ–π, –≤–∞–∂–Ω–æ —á—Ç–æ –æ—Ç–≤–µ—á–∞–µ—Ç)
            val isSuccess = responseCode in 200..499
            
            if (isSuccess) {
                Timber.tag(TAG).i("‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç (–∫–æ–¥ $responseCode)")
                LogManager.logInfo("‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (–∫–æ–¥ $responseCode)")
            } else {
                Timber.tag(TAG).w("‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –∫–æ–¥ $responseCode")
                LogManager.logWarning("‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ–æ–±—ã—á–Ω—ã–π –∫–æ–¥: $responseCode")
            }
            
            isSuccess
            
        } catch (e: Exception) {
            Timber.tag(TAG).e(e, "‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞")
            LogManager.logError("‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: ${e.message}")
            false
        }
    }
    
    override fun onSupportNavigateUp(): Boolean {
        Timber.tag(TAG).i("üîô –ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞–∑–∞–¥")
        LogManager.logInfo("üîô –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–µ—Ä–Ω—É–ª—Å—è –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
        finish()
        return true
    }
    
    override fun onDestroy() {
        super.onDestroy()
        try {
            scope.cancel()
            Timber.tag(TAG).i("üîö onDestroy()")
            LogManager.logInfo("üîö SettingsActivity onDestroy()")
        } catch (e: Exception) {
            Timber.tag(TAG).e(e, "‚ùå –û—à–∏–±–∫–∞ –≤ onDestroy()")
        }
    }
}

